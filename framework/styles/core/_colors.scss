// --------------------------------

// Color mixins

// --------------------------------

// define HSL color variable
@mixin defineColorHSL($color, $hue, $saturation, $lightness){
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");#{$color}-h: #{$hue};#{$color}-s: #{$saturation};#{$color}-l: #{$lightness};
}

// return color with different opacity value
@function alpha($color, $opacity){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsla($color-h, $color-s, $color-l, $opacity);
}

// return color with different lightness value
@function lightness($color, $lightnessMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// --------------------------------

// Data themes

// --------------------------------

[data-theme] {
  background-color: var(--color-bg, hsl(0, 0%, 100%));
  color: var(--color-contrast-high, hsl(240, 4%, 20%));
}

// --------------------------------

// Color Variales

// --------------------------------

:root, [data-theme="default"] {
  // main
  @include defineColorHSL(--color-primary-darker, 220, 90%, 36%);
  @include defineColorHSL(--color-primary-dark, 220, 90%, 46%);
  @include defineColorHSL(--color-primary, 220, 90%, 56%);
  @include defineColorHSL(--color-primary-light, 220, 90%, 66%);
  @include defineColorHSL(--color-primary-lighter, 220, 90%, 76%);

  @include defineColorHSL(--color-accent-darker, 349, 75%, 31%);
  @include defineColorHSL(--color-accent-dark, 349, 75%, 41%);
  @include defineColorHSL(--color-accent, 349, 75%, 51%);
  @include defineColorHSL(--color-accent-light, 349, 75%, 61%);
  @include defineColorHSL(--color-accent-lighter, 349, 75%, 71%);

  // black + white
  @include defineColorHSL(--color-black, 240, 8%, 12%);
  @include defineColorHSL(--color-white, 0, 0%, 100%);

  // feedback
  @include defineColorHSL(--color-success-darker, 94, 48%, 36%);
  @include defineColorHSL(--color-success-dark, 94, 48%, 46%);
  @include defineColorHSL(--color-success, 94, 48%, 56%);
  @include defineColorHSL(--color-success-light, 94, 48%, 66%);
  @include defineColorHSL(--color-success-lighter, 94, 48%, 76%);

  @include defineColorHSL(--color-error-darker, 349, 75%, 31%);
  @include defineColorHSL(--color-error-dark, 349, 75%, 41%);
  @include defineColorHSL(--color-error, 349, 75%, 51%);
  @include defineColorHSL(--color-error-light, 349, 75%, 61%);
  @include defineColorHSL(--color-error-lighter, 349, 75%, 71%);

  @include defineColorHSL(--color-warning-darker, 46, 100%, 41%);
  @include defineColorHSL(--color-warning-dark, 46, 100%, 51%);
  @include defineColorHSL(--color-warning, 46, 100%, 61%);
  @include defineColorHSL(--color-warning-light, 46, 100%, 71%);
  @include defineColorHSL(--color-warning-lighter, 46, 100%, 81%);

  // color contrasts
  @include defineColorHSL(--color-bg, 0, 0%, 100%);
  @include defineColorHSL(--color-contrast-lower, 0, 0%, 95%);
  @include defineColorHSL(--color-contrast-low, 240, 1%, 83%);
  @include defineColorHSL(--color-contrast-medium, 240, 1%, 48%);
  @include defineColorHSL(--color-contrast-high, 240, 4%, 20%);
  @include defineColorHSL(--color-contrast-higher, 240, 8%, 12%);
}

// --------------------------------

// Color utilities

// --------------------------------

[class*="color-"] { --color-o: 1; }

.color-inherit { color: inherit; }
.color-bg { color: alpha(var(--color-bg), var(--color-o, 1)); }
.color-contrast-lower { color: alpha(var(--color-contrast-lower), var(--color-o, 1)); }
.color-contrast-low { color: alpha(var(--color-contrast-low), var(--color-o, 1)); }
.color-contrast-medium { color: alpha(var(--color-contrast-medium), var(--color-o, 1)); }
.color-contrast-high { color: alpha(var(--color-contrast-high), var(--color-o, 1)); }
.color-contrast-higher { color: alpha(var(--color-contrast-higher), var(--color-o, 1)); }
.color-primary-darker { color: alpha(var(--color-primary-darker), var(--color-o, 1)); }
.color-primary-dark { color: alpha(var(--color-primary-dark), var(--color-o, 1)); }
.color-primary { color: alpha(var(--color-primary), var(--color-o, 1)); }
.color-primary-light { color: alpha(var(--color-primary-light), var(--color-o, 1)); }
.color-primary-lighter { color: alpha(var(--color-primary-lighter), var(--color-o, 1)); }
.color-accent-darker { color: alpha(var(--color-accent-darker), var(--color-o, 1)); }
.color-accent-dark { color: alpha(var(--color-accent-dark), var(--color-o, 1)); }
.color-accent { color: alpha(var(--color-accent), var(--color-o, 1)); }
.color-accent-light { color: alpha(var(--color-accent-light), var(--color-o, 1)); }
.color-accent-lighter { color: alpha(var(--color-accent-lighter), var(--color-o, 1)); }
.color-success-darker { color: alpha(var(--color-success-darker), var(--color-o, 1)); }
.color-success-dark { color: alpha(var(--color-success-dark), var(--color-o, 1)); }
.color-success { color: alpha(var(--color-success), var(--color-o, 1)); }
.color-success-light { color: alpha(var(--color-success-light), var(--color-o, 1)); }
.color-success-lighter { color: alpha(var(--color-success-lighter), var(--color-o, 1)); }
.color-warning-darker { color: alpha(var(--color-warning-darker), var(--color-o, 1)); }
.color-warning-dark { color: alpha(var(--color-warning-dark), var(--color-o, 1)); }
.color-warning { color: alpha(var(--color-warning), var(--color-o, 1)); }
.color-warning-light { color: alpha(var(--color-warning-light), var(--color-o, 1)); }
.color-warning-lighter { color: alpha(var(--color-warning-lighter), var(--color-o, 1)); }
.color-error-darker { color: alpha(var(--color-error-darker), var(--color-o, 1)); }
.color-error-dark { color: alpha(var(--color-error-dark), var(--color-o, 1)); }
.color-error { color: alpha(var(--color-error), var(--color-o, 1)); }
.color-error-light { color: alpha(var(--color-error-light), var(--color-o, 1)); }
.color-error-lighter { color: alpha(var(--color-error-lighter), var(--color-o, 1)); }
.color-white { color: alpha(var(--color-white), var(--color-o, 1)); }
.color-black { color: alpha(var(--color-black), var(--color-o, 1)); }

@supports (--css: variables) {
  .color-opacity-10\% { --color-o: 0.1; }
  .color-opacity-20\% { --color-o: 0.2; }
  .color-opacity-30\% { --color-o: 0.3; }
  .color-opacity-40\% { --color-o: 0.4; }
  .color-opacity-50\% { --color-o: 0.5; }
  .color-opacity-60\% { --color-o: 0.6; }
  .color-opacity-70\% { --color-o: 0.7; }
  .color-opacity-80\% { --color-o: 0.8; }
  .color-opacity-90\% { --color-o: 0.9; }
}
